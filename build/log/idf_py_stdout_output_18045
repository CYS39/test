[1/10] Performing build step for 'bootloader'
[1/1] cd /home/gzlg/esp32/hello_world/build/bootloader/esp-idf/esptool_py && /home/gzlg/.espressif/python_env/idf5.4_py3.8_env/bin/python /home/gzlg/esp32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/gzlg/esp32/hello_world/build/bootloader/bootloader.bin
Bootloader binary size 0x6b70 bytes. 0x490 bytes (4%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/hello_world_main.c.obj
[3/8] Linking C static library esp-idf/main/libmain.a
[4/8] Generating ld/sections.ld
[5/8] Building C object CMakeFiles/hello_world.elf.dir/project_elf_src_esp32.c.obj
[6/8] Linking CXX executable hello_world.elf
[7/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/gzlg/esp32/hello_world/build/hello_world.bin
[8/8] cd /home/gzlg/esp32/hello_world/build/esp-idf/esptool_py && /home/gzlg/.espressif/python_env/idf5.4_py3.8_env/bin/python /home/gzlg/esp32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/gzlg/esp32/hello_world/build/partition_table/partition-table.bin /home/gzlg/esp32/hello_world/build/hello_world.bin
hello_world.bin binary size 0x2db50 bytes. Smallest app partition is 0x100000 bytes. 0xd24b0 bytes (82%) free.
